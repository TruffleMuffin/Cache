{"name":"Trufflecache","tagline":"A Cache library written to extend and make MemcachedSharp easier to use.","body":"TruffleCache\r\n=====\r\n\r\nA Cache library written to extend and make MemcachedSharp easier to use.\r\n\r\nUsage\r\n-----\r\n\r\nI have provided some example usages, one for non-async access and one for async access.\r\n\r\n### Non-Async\r\n\r\n```c#\r\nprivate Cache<YourClass> cache;\r\n\r\n......\r\n\r\nvar result = target.Get(\"myKey\");\r\nvar result = target.Get(new [] { \"myKey1\", \"myKey2\" });\r\n\r\ntarget.Set(key, item);\r\n\r\nvar removed = target.Remove(key);\r\n```\r\n\r\n### Async\r\n\r\n```c#\r\nprivate Cache<YourClass> cache;\r\n\r\n......\r\n\r\nvar result = await target.GetAsync(\"myKey\");\r\nvar result = await target.GetAsync(new [] { \"myKey1\", \"myKey2\" });\r\n\r\nawait target.SetAsync(key, item);\r\n\r\nvar removed = await target.RemoveAsync(key);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}